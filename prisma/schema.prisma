generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?    @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  admin         Boolean @default(false)
  posts         Post[]
  accounts      Account[]
  sessions      Session[]

  bio           String?
  likes         Like[]
  followers     Follow[] @relation("followers")
  following     Follow[] @relation("following")
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          String @id @default(cuid())
  text        String
  completed   Boolean @default(false)
  createdAt   DateTime @default(now())
  userId      String 
  parentId    String?
  user        User @relation(fields: [userId], references: [id])
  likes       Like[]
  replies     Post[] @relation("replies")
  parent      Post?  @relation("replies", fields: [parentId], references: [id])
}

model Like {
  id          String @id @default(cuid())
  userId      String 
  postId      String 
  likeAt      DateTime @default(now())
  user        User @relation(fields: [userId], references: [id])
  post        Post @relation(fields: [postId], references: [id])
}

model Follow {
  id          String @id @default(cuid())
  followerId  String
  followingId String 
  followAt    DateTime @default(now())
  followers   User @relation("followers", fields: [followerId], references: [id])
  following   User @relation("following", fields: [followingId], references: [id])
}